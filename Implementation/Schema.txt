create schema Airline;
use Airline;
create table User(
	Id int auto_increment not null,
    Name varchar(30),
    Gender char,
    Email varchar(100) not null,
    Password varchar(100) not null,
    isAdmin char,
    Bdate date,
    PassportNumber varchar(45), 
	primary key (Id)
);

create table Airport (
	Airport_code varchar(10) not null,
    Country varchar(20) not null,
    City varchar(20) not null,
    Name varchar(20) not null,
    Longitude int,
    Latitude int,
    primary key (Airport_code)
);
insert into Airport values("140","LEBNAN","lle","l",30,40);


create table Plane(
	Plane_id int not null,
    Type varchar(20),
    No_of_seats int not null,
    Income int,
    Status varchar(10),
    primary key (Plane_id)
);

insert into Plane values(10,"f16",100,345,1);

create table Flight(
	Flight_id int auto_increment not null,
    Departure timestamp not null,
    Source varchar(10) not null,
    Destination varchar(10) not null,
    Plane_id int not null,
    no_of_available_seats int not null,
    primary key (Flight_id),
    foreign key (Source) references Airport(Airport_code) on delete cascade,
    foreign key (Destination) references Airport(Airport_code) on delete cascade,
    foreign key (Plane_id) references Plane (Plane_id) on delete cascade
);
select * from flight;
create table Ticket(
	Ticket_id int auto_increment not null,
    usderID int not null,
    Cost double not null,
    no_of_passenger int not null,
    primary key (Ticket_id),
    foreign key (usderID) references User (Id) on delete cascade
);


create table Flight_In_Tickets(
	Ticket_id int not null,
    flightID int not null,
    primary key (Ticket_id,flightID),
    foreign key (Ticket_id) references Ticket (Ticket_id) on delete cascade,
    foreign key (flightID) references Flight (Flight_id) on delete cascade
);
create table Flight_extra_In_Tickets(
	Ticket_id int  not null,
    flightID int not null,
    extra varchar(45) not null,
    primary key (Ticket_id,flightID),
    foreign key (Ticket_id) references Ticket (Ticket_id) on delete cascade,
    foreign key (Ticket_id) references Ticket (Ticket_id) on delete cascade,
    foreign key (flightID) references Flight (Flight_id) on delete cascade
);

create table seat_no_In_Tickets(
	Ticket_id int not null,
    flightID int not null,
    seatNo int not null,
    primary key (Ticket_id,flightID,seatNo),
    foreign key (Ticket_id) references Ticket (Ticket_id) on delete cascade,
    foreign key (flightID) references Flight (Flight_id) on delete cascade
);


DELIMITER |
CREATE TRIGGER  Check_Tickets  BEFORE update ON Flight 
FOR EACH ROW
BEGIN


IF (new.no_of_available_seats)<=0 THEN
SIGNAL SQLSTATE '45000'
SET MESSAGE_TEXT = 'ERROR:  negative number of copies';
END IF;
END
|
DELIMITER ;


DELIMITER |
CREATE TRIGGER  decreament_ticket  before insert ON Flight_In_Tickets 
FOR EACH ROW
Begin
DECLARE available_seats INT; 
DECLARE no_oF_passengers INT;
set available_seats= (select no_of_available_seats from Flight where  Flight_id=new.flightID) ;
set no_oF_passengers= (select no_of_passenger from Ticket where  Ticket_id=new.Ticket_id) ;
update Flight set 
no_of_available_seats=  available_seats-no_oF_passengers where  Flight_id=new.flightID; 
End
|
DELIMITER ;



select * from Ticket;
select * from Flight;
select * from seat_no_In_Tickets;
select * from Flight_extra_In_Tickets;
select * from Flight_In_Tickets;
insert into User  (Id,name, gender, Email, Password, isAdmin, Bdate,PassportNumber)values(default,"sakr",'m',"ziad@","11111","1",'1980-12-12',"2453");
select * from User;
select * from Ticket , User,Flight, Flight_In_Tickets,seat_no_In_Tickets,Flight_extra_In_Tickets,seat_no_In_Tickets where User.Id=Ticket.usderID and Flight.Flight_id=Flight_In_Tickets.flightID and seat_no_In_Tickets.Ticket_id=Ticket.Ticket_id  and   Flight_extra_In_Tickets.Ticket_id=Ticket.Ticket_id      and User.Id=1;
insert into Flight values(default,"2022-11-11","140","140",10,100);
select * ,sum(cost) As Toatal_COst from User as u INNER JOIN Ticket as t on t.usderID=u.Id group by u.Id;
select * from Flight_In_Tickets as f INNER JOIN Ticket as t on t.Ticket_id=f.Ticket_id  INNER JOIN User as u on t.usderID=u.Id  where  flightID=1;
select * ,sum(cost) As Total_cost from User as u INNER JOIN Ticket as t on t.usderID=u.Id group by u.Id  ORDER BY Total_cost DESC limit 5;